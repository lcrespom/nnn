{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/neurons.ts",
    "src/text-utils.ts",
    "src/worker.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const DEFAULT_ACTIVATION_FUNCTION = sigmoid;\n\ntype ActivationFunction = (number) => number;\ntype NeuronLayer = Neuron[];\n\n\nexport interface Example {\n\tinputs: number[];\n\toutputs: number[];\n}\n\n\nexport class Neuron {\n\tweights: number[];\n\toutput: number;\n\tdisabled = false;\n\n\tconstructor(numWeights: number) {\n\t\tthis.output = NaN;\n\t\tthis.weights = [];\n\t\tfor (let i = 0; i < numWeights; i++)\n\t\t\tthis.weights.push(Math.random());\n\t}\n}\n\n\nexport class NeuralNetwork {\n\tlayers: NeuronLayer[];\n\t// Tunable parameters\n\tactivationFunc: ActivationFunction;\n\tepsilon: number;\n\tacceptableError: number;\n\tmaxLearnIterations: number;\n\t// Learn tracking\n\tlearnIteration: number;\n\tlearnError: number;\n\n\tconstructor(public numInputs: number, public layerSizes: number[]) {\n\t\t// Initialize default params\n\t\tthis.activationFunc = DEFAULT_ACTIVATION_FUNCTION;\n\t\tthis.epsilon = 0.5;\n\t\tthis.acceptableError = 0.01;\n\t\tthis.maxLearnIterations = 1000;\n\t\t// Initialize layers\n\t\tthis.layers = [];\n\t\tfor (let i = 0; i < layerSizes.length; i++) {\n\t\t\tlet numWeights = (i == 0 ? numInputs : layerSizes[i - 1]) + 1;\n\t\t\tthis.layers.push(this.createLayer(layerSizes[i], numWeights));\n\t\t}\n\t}\n\n\tcreateLayer(size: number, weights: number): NeuronLayer {\n\t\tlet layer: NeuronLayer = [];\n\t\tfor (let i = 0; i < size; i++)\n\t\t\tlayer.push(new Neuron(weights));\n\t\treturn layer;\n\t}\n\n\t// -------------------- Forward propagation --------------------\n\n\tforwardNeuron(neuron: Neuron, inputs: number[]): number {\n\t\tlet weightedSum = inputs.reduce(\n\t\t\t(accum, input, i) => accum + input * neuron.weights[i], 0);\n\t\tif (neuron.disabled)\n\t\t\tneuron.output = 0;\n\t\telse\n\t\t\tneuron.output = this.activationFunc(weightedSum);\n\t\treturn neuron.output;\n\t}\n\n\tforward(inputs: number[]): number[] {\n\t\tlet layerOut: number[] = [];\n\t\tlet prevLayerOut = this.addBias(inputs);\n\t\tthis.layers.forEach(layer => {\n\t\t\tlayerOut = [];\n\t\t\tlayer.forEach(neuron =>\n\t\t\t\tlayerOut.push(this.forwardNeuron(neuron, prevLayerOut))\n\t\t\t);\n\t\t\tprevLayerOut = this.addBias(layerOut);\n\t\t});\n\t\treturn layerOut;\n\t}\n\n\t// -------------------- Back propagation --------------------\n\n\tbackPropagateNeuron(neuron: Neuron, error: number,\n\t\tprevLayerOuts: number[], prevLayerErrors: number[]): void {\n\t\tlet delta = error * neuron.output * (1 - neuron.output);\n\t\tfor (let j = 0; j < neuron.weights.length; j++) {\n\t\t\tprevLayerErrors[j] += delta * neuron.weights[j];\n\t\t\tneuron.weights[j] += this.epsilon * delta * prevLayerOuts[j];\n\t\t}\n\t}\n\n\tbackPropagate(inputs: number[], targets: number[]): void {\n\t\tlet outputLayer = this.layers[this.layers.length - 1];\n\t\tlet errors = map2(outputLayer, targets, (neuron, target) => target - neuron.output);\n\t\tfor (let l = this.layers.length - 1; l >= 0; l--) {\n\t\t\tlet layer = this.layers[l];\n\t\t\tlet prevLayerOuts = this.addBias(l > 0 ?\n\t\t\t\tthis.layers[l - 1].map(neuron => neuron.output) : inputs);\n\t\t\tlet prevLayerErrors = fillArray(prevLayerOuts.length, 0);\n\t\t\tfor (let i = 0; i < layer.length; i++) {\n\t\t\t\tthis.backPropagateNeuron(layer[i], errors[i], prevLayerOuts, prevLayerErrors);\n\t\t\t}\n\t\t\terrors = prevLayerErrors;\n\t\t}\n\t}\n\n\t// -------------------- Iterative learning --------------------\n\n\tlearn(examples: Example[]): boolean {\n\t\tthis.learnIteration = 0;\n\t\tdo {\n\t\t\tthis.learnError = 0;\n\t\t\tfor (let i = 0; i < examples.length; i++) {\n\t\t\t\tlet actualOuts = this.forward(examples[i].inputs);\n\t\t\t\tlet expectedOuts = examples[i].outputs;\n\t\t\t\tthis.backPropagate(examples[i].inputs, expectedOuts);\n\t\t\t\tthis.learnError += this.sampleError(actualOuts, expectedOuts);\n\t\t\t}\n\t\t\tthis.learnIteration++;\n\t\t\tthis.learnError = this.learnError / examples.length;\n\t\t\tthis.reportLearn(this.learnIteration, this.learnError);\n\t\t} while (this.learnIteration < this.maxLearnIterations\n\t\t\t&& this.learnError > this.acceptableError);\n\t\treturn this.learnError <= this.acceptableError;\n\t}\n\n\tsampleError(actualOuts: number[], expectedOuts: number[]): number {\n\t\tconst square = x => x * x;\n\t\tlet sum = actualOuts.reduce(\n\t\t\t(accum, actualOut, i) => accum + square(actualOut - expectedOuts[i]), 0);\n\t\treturn sum / 2;\n\t}\n\n\t// -------------------- Misc --------------------\n\n\taddBias(values: number[]): number[] {\n\t\tlet biasedValues = values.slice();\n\t\tbiasedValues.push(1);\n\t\treturn biasedValues;\n\t}\n\n\treportLearn(iteration: number, totalError: number) {\n\t\tif (iteration % 100 == 0)\n\t\t\tconsole.log(`Learn iteration ${iteration} - error: ${totalError}`);\n\t}\n\n\t// -------------------- Import / export --------------------\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tnumInputs: this.numInputs,\n\t\t\tlayerSizes: this.layerSizes,\n\t\t\tepsilon: this.epsilon,\n\t\t\tacceptableError: this.acceptableError,\n\t\t\tmaxLearnIterations: this.maxLearnIterations,\n\t\t\tlayers: this.layers,\n\t\t\tlearnIteration: this.learnIteration,\n\t\t\tlearnError: this.learnError\n\t\t};\n\t}\n\n\t/* tslint:disable:member-ordering */\n\tstatic fromJSON(json: any): NeuralNetwork {\n\t\tlet nn = new NeuralNetwork(json.numInputs, json.layerSizes);\n\t\tnn.epsilon = json.epsilon;\n\t\tnn.acceptableError = json.acceptableError;\n\t\tnn.maxLearnIterations = json.maxLearnIterations;\n\t\tnn.layers = json.layers;\n\t\tnn.learnIteration = json.learnIteration;\n\t\tnn.learnError = json.learnError;\n\t\treturn nn;\n\t}\n}\n\n\n// -------------------- Activation functions --------------------\n\nfunction sigmoid(x: number): number {\n\tif (x < -45.0) return 0.0;\n\telse if (x > 45.0) return 1.0;\n\telse return 1.0 / (1.0 + Math.exp(-x));\n}\n\n// -------------------- Utility functions --------------------\n\nexport function fillArray<T>(len: number, v: T): T[] {\n\tlet a = new Array(len);\n\tfor (let i = 0; i < a.length; i++) a[i] = v;\n\treturn a;\n}\n\nexport function map2<T1, T2, U>(array1: T1[], array2: T2[], cb: (value1: T1, value2: T2) => U): U[] {\n\tif (array1.length >= array2.length)\n\t\treturn array1.map((e1, i) => cb(e1, array2[i]));\n\telse\n\t\treturn array2.map((e2, i) => cb(array1[i], e2));\n}\n",
    "import { Example } from './neurons';\n\nexport default {\n\tparseLearnLines,\n\tparseExample,\n\tparseDataLines,\n\tparseNumbers\n};\n\nfunction parseLearnLines(allLines: string, numInputs: number, numOutputs?: number): Example[] {\n\tlet examples: Example[] = [];\n\tlet lines = parseDataLines(allLines);\n\tlines.forEach((line, i) => {\n\t\tlet example = parseExample(line);\n\t\t//TODO validate line by checking:\n\t\t//\t- if example.outputs is [], then the / is missing (that is OK for tests, not OK for learning)\n\t\t//\t- if the number of inputs or outputs is invalid, then some values are missing or exceeding\n\t\t//\t- if some value is NaN, then there are invalid numbers\n\t\tif (example) examples.push(example);\n\t});\n\treturn examples;\n}\n\nfunction parseExample(line: string): Example | null {\n\tlet inout = line.split('/');\n\tlet inputs = parseNumbers(inout[0]);\n\tlet outputs = inout.length < 2 ? [] : parseNumbers(inout[1]);\n\treturn { inputs, outputs };\n}\n\nfunction parseDataLines(allLines: string): string[] {\n\treturn allLines.split('\\n').filter(line => {\n\t\tline = line.trim();\n\t\treturn line.length > 0 && line[0] != '#';\n\t}).map(line => line.replace(/\\t/g, ' '));\n}\n\nfunction parseNumbers(line: string): number[] {\n\treturn line.split(' ').filter(s => s.length > 0).map(s => parseFloat(s));\n}\n",
    "import { NeuralNetwork } from './neurons';\nimport txtutils from './text-utils';\n\n\nlet nn: NeuralNetwork;\nlet lastReport = Date.now();\n\ndeclare var postMessage: (data: any) => void;\n\n\nself.onmessage = msg => {\n\tswitch (msg.data.command) {\n\t\tcase 'start': return doStart(msg.data.params);\n\t\tdefault: throw Error('Unknown command: ' + msg.data.command);\n\t}\n};\n\n\nfunction doStart(formData) {\n\tlet numLayers = txtutils.parseNumbers(formData.numHidden);\n\tnumLayers.push(+formData.numOutputs);\n\tnn = new NeuralNetwork(+formData.numInputs, numLayers);\n\tnn.reportLearn = wwReportLearn;\n\tnn.acceptableError = +formData.maxError;\n\tnn.maxLearnIterations = +formData.maxIterations;\n\tnn.epsilon = +formData.epsilon;\n\tlet examples = txtutils.parseLearnLines(formData.learnLines, +formData.numInputs, +formData.numOutputs);\n\tnn.learn(examples);\n\tconsole.log(`*** Learned in ${nn.learnIteration} iterations, with an error of ${nn.learnError}`);\n\tpostMessage({ command: 'nn-learned', params: nn.toJSON() });\n\tself.close();\n}\n\nfunction wwReportLearn(iteration: number, totalError: number) {\n\tlet now = Date.now();\n\tif (now - lastReport > 500) {\n\t\tlastReport = now;\n\t\tpostMessage({ command: 'nn-progress', params: { iteration, totalError }});\n\t}\n}\n"
  ]
}