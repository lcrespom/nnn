{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/neurons.ts",
    "src/nnn-web.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "const DEFAULT_ACTIVATION_FUNCTION = sigmoid;\n\ntype ActivationFunction = (number) => number;\ntype NeuronLayer = Neuron[];\n\n\nexport interface Example {\n\tinputs: number[];\n\toutputs: number[];\n}\n\n\nexport class Neuron {\n\tweights: number[];\n\toutput: number;\n\n\tconstructor(numWeights: number) {\n\t\tthis.output = NaN;\n\t\tthis.weights = [];\n\t\tfor (let i = 0; i < numWeights; i++)\n\t\t\tthis.weights.push(Math.random());\n\t}\n}\n\n\nexport class NeuralNetwork {\n\tlayers: NeuronLayer[];\n\t// Tunable parameters\n\tactivationFunc: ActivationFunction;\n\tepsilon: number;\n\tacceptableError: number;\n\tmaxLearnIterations: number;\n\t// Learn tracking\n\tlearnIteration: number;\n\tlearnError: number;\n\n\tconstructor(public numInputs: number, public layerSizes: number[]) {\n\t\t// Initialize default params\n\t\tthis.activationFunc = DEFAULT_ACTIVATION_FUNCTION;\n\t\tthis.epsilon = 0.5;\n\t\tthis.acceptableError = 0.01;\n\t\tthis.maxLearnIterations = 1000;\n\t\t// Initialize layers\n\t\tthis.layers = [];\n\t\tfor (let i = 0; i < layerSizes.length; i++) {\n\t\t\tlet numWeights = (i == 0 ? numInputs : layerSizes[i - 1]) + 1;\n\t\t\tthis.layers.push(this.createLayer(layerSizes[i], numWeights));\n\t\t}\n\t}\n\n\tcreateLayer(size: number, weights: number): NeuronLayer {\n\t\tlet layer: NeuronLayer = [];\n\t\tfor (let i = 0; i < size; i++)\n\t\t\tlayer.push(new Neuron(weights));\n\t\treturn layer;\n\t}\n\n\t// -------------------- Forward propagation --------------------\n\n\tforwardNeuron(neuron: Neuron, inputs: number[]): number {\n\t\tlet weightedSum = inputs.reduce(\n\t\t\t(accum, input, i) => accum + input * neuron.weights[i], 0);\n\t\tneuron.output = this.activationFunc(weightedSum);\n\t\treturn neuron.output;\n\t}\n\n\tforward(inputs: number[]): number[] {\n\t\tlet layerOut: number[] = [];\n\t\tlet prevLayerOut = this.addBias(inputs);\n\t\tthis.layers.forEach(layer => {\n\t\t\tlayerOut = [];\n\t\t\tlayer.forEach(neuron =>\n\t\t\t\tlayerOut.push(this.forwardNeuron(neuron, prevLayerOut))\n\t\t\t);\n\t\t\tprevLayerOut = this.addBias(layerOut);\n\t\t});\n\t\treturn layerOut;\n\t}\n\n\t// -------------------- Back propagation --------------------\n\n\tbackPropagateNeuron(neuron: Neuron, error: number,\n\t\tprevLayerOuts: number[], prevLayerErrors: number[]): void {\n\t\tlet delta = error * neuron.output * (1 - neuron.output);\n\t\tfor (let j = 0; j < neuron.weights.length; j++) {\n\t\t\tprevLayerErrors[j] += delta * neuron.weights[j];\n\t\t\tneuron.weights[j] += this.epsilon * delta * prevLayerOuts[j];\n\t\t}\n\t}\n\n\tbackPropagate(inputs: number[], targets: number[]): void {\n\t\tlet outputLayer = this.layers[this.layers.length - 1];\n\t\tlet errors = outputLayer.map((neuron, i) => targets[i] - neuron.output);\n\t\tfor (let l = this.layers.length - 1; l >= 0; l--) {\n\t\t\tlet layer = this.layers[l];\n\t\t\tlet prevLayerOuts = this.addBias(l > 0 ?\n\t\t\t\tthis.layers[l - 1].map(neuron => neuron.output) : inputs);\n\t\t\tlet prevLayerErrors = this.fillArray(prevLayerOuts.length, 0);\n\t\t\tfor (let i = 0; i < layer.length; i++) {\n\t\t\t\tthis.backPropagateNeuron(layer[i], errors[i], prevLayerOuts, prevLayerErrors);\n\t\t\t}\n\t\t\terrors = prevLayerErrors;\n\t\t}\n\t}\n\n\t// -------------------- Iterative learning --------------------\n\n\tlearn(examples: Example[]): boolean {\n\t\tthis.learnIteration = 0;\n\t\tdo {\n\t\t\tthis.learnError = 0;\n\t\t\tfor (let i = 0; i < examples.length; i++) {\n\t\t\t\tlet actualOuts = this.forward(examples[i].inputs);\n\t\t\t\tlet expectedOuts = examples[i].outputs;\n\t\t\t\tthis.backPropagate(examples[i].inputs, expectedOuts);\n\t\t\t\tthis.learnError += this.sampleError(actualOuts, expectedOuts);\n\t\t\t}\n\t\t\tthis.learnIteration++;\n\t\t\tthis.learnError = this.learnError / examples.length;\n\t\t\tthis.reportLearn(this.learnIteration, this.learnError);\n\t\t} while (this.learnIteration < this.maxLearnIterations\n\t\t\t&& this.learnError > this.acceptableError);\n\t\treturn this.learnError <= this.acceptableError;\n\t}\n\n\tsampleError(actualOuts: number[], expectedOuts: number[]): number {\n\t\tconst square = x => x * x;\n\t\tlet sum = actualOuts.reduce(\n\t\t\t(accum, actualOut, i) => accum + square(actualOut - expectedOuts[i]), 0);\n\t\treturn sum / 2;\n\t}\n\n\t// -------------------- Misc --------------------\n\n\taddBias(values: number[]): number[] {\n\t\tlet biasedValues = values.slice();\n\t\tbiasedValues.push(1);\n\t\treturn biasedValues;\n\t}\n\n\treportLearn(iteration, totalError) {\n\t\tif (iteration % 100 == 0)\n\t\t\tconsole.log(`Learn iteration ${iteration} - error: ${totalError}`);\n\t}\n\n\tfillArray<T>(len: number, v: T): T[] {\n\t\tlet a = new Array(len);\n\t\tfor (let i = 0; i < a.length; i++) a[i] = v;\n\t\treturn a;\n\t}\n\n}\n\n\n// -------------------- Activation functions --------------------\n\nfunction sigmoid(x: number): number {\n\tif (x < -45.0) return 0.0;\n\telse if (x > 45.0) return 1.0;\n\telse return 1.0 / (1.0 + Math.exp(-x));\n}\n",
    "import { NeuralNetwork, Example } from './neurons';\n\nlet nn: NeuralNetwork;\n\n$(function() {\n\t// $('input,textarea').on('input', evt => {\n\t// \tlet formData = getFormData();\n\t// \t//TODO: validate and activate buttons\n\t// });\n\t// -------------------- Handle click on \"Learn\" button --------------------\n\t$('#butlearn').click(_ => {\n\t\t$('#butlearn').text('Learning...');\n\t\tlet formData = getFormData();\n\t\tlet numLayers = parseNumbers(formData.numHidden);\n\t\tnumLayers.push(+formData.numOutputs);\n\t\tnn = new NeuralNetwork(+formData.numInputs, numLayers);\n\t\tnn.acceptableError = +formData.maxError;\n\t\tnn.maxLearnIterations = +formData.maxIterations;\n\t\tnn.epsilon = +formData.epsilon;\n\t\tlet examples = parseLearnLines(formData.learnLines, +formData.numInputs, +formData.numOutputs);\n\t\tsetTimeout(() => {\n\t\t\tnn.learn(examples);\n\t\t\tconsole.log(`*** Learned in ${nn.learnIteration} iterations, with an error of ${nn.learnError}`);\n\t\t\t$('#butlearn').text('Learn');\n\t\t\t$('#liters').val(nn.learnIteration);\n\t\t\t$('#lerror').val(fmtNum(nn.learnError, 9));\n\t\t\t$('#buttest').attr('disabled', <any>false);\n\t\t}, 10);\n\t});\n\t// -------------------- Handle click on \"Test\" button --------------------\n\t$('#buttest').click(_ => {\n\t\tlet formData = getFormData();\n\t\tlet tests = parseTestLines(formData.testLines, nn.numInputs);\n\t\tlet testResults: number[][] = [];\n\t\ttests.forEach(test => testResults.push(nn.forward(test)));\n\t\tlet strResult = testResults\n\t\t\t.map(result => result.map(x => fmtNum(x, 6)).join('  '))\n\t\t\t.join('\\n');\n\t\t$('#tout').text(strResult);\n\t});\n\t// -------------------- Handle click on \"Test\" button --------------------\n\t$('#butdiagram').click(_ => {\n\t\tif (!nn) return;\n\t\tlet nnd = new NeuralNetworkDiagram(nn, <HTMLCanvasElement>$('#nn-diagram').get(0));\n\t\tnnd.draw();\n\t});\n\t// -------------------- Enable bootstrap-styled tooltips --------------------\n\t$('[data-toggle=\"tooltip\"]').tooltip();\n});\n\n\n// ------------------------- User input parsing -------------------------\n\nfunction getFormData() {\n\treturn {\n\t\tnumInputs: $('#nimputs').val(),\n\t\tnumOutputs: $('#noutputs').val(),\n\t\tnumHidden: $('#nhidden').val(),\n\t\tmaxError: $('#maxerror').val(),\n\t\tmaxIterations: $('#maxiters').val(),\n\t\tepsilon: $('#epsilon').val(),\n\t\tlearnLines: $('#ldata').val(),\n\t\ttestLines: $('#tdata').val()\n\t};\n}\n\nfunction parseLearnLines(allLines: string, numInputs: number, numOutputs: number): Example[] {\n\tlet examples: Example[] = [];\n\tlet lines = parseDataLines(allLines);\n\tlines.forEach((line, i) => {\n\t\tlet example = parseExample(line);\n\t\t//TODO validate line by checking:\n\t\t//\t- if example is null, then the / is missing\n\t\t//\t- if the number of inputs or outputs is invalid, then some values are missing or exceeding\n\t\t//\t- if some value is NaN, then there are invalid numbers\n\t\tif (example) examples.push(example);\n\t});\n\treturn examples;\n}\n\nfunction parseExample(line: string): Example | null {\n\tlet inout = line.split('/');\n\tif (inout.length < 2) return null;\n\tlet inputs = parseNumbers(inout[0]);\n\tlet outputs = parseNumbers(inout[1]);\n\treturn { inputs, outputs };\n}\n\nfunction parseTestLines(allLines: string, numInputs: number): number[][] {\n\tlet tests: number[][];\n\ttests = [];\n\tlet lines = parseDataLines(allLines);\n\tlines.forEach((line, i) => {\n\t\tlet inputs = parseNumbers(line);\n\t\t//TODO validate line by checking:\n\t\t//\t- if the number of inputs is invalid, then some values are missing or exceeding\n\t\t//\t- if some value is NaN, then there are invalid numbers\n\t\ttests.push(inputs);\n\t});\n\treturn tests;\n}\n\nfunction parseDataLines(allLines: string): string[] {\n\treturn allLines.split('\\n').filter(line => {\n\t\tline = line.trim();\n\t\treturn line.length > 0 && line[0] != '#';\n\t});\n}\n\nfunction parseNumbers(line: string): number[] {\n\treturn line.split(' ').filter(s => s.length > 0).map(s => parseFloat(s));\n}\n\nfunction fmtNum(n: number, len = 5): string {\n\treturn n.toString().substr(0, len);\n}\n\n\n// ------------------------- Diagram drawing -------------------------\n\nclass NeuralNetworkDiagram {\n\tctx: CanvasRenderingContext2D | null;\n\tr: number;\n\tnumCols: number;\n\n\tconstructor(public net: NeuralNetwork, public canvas: HTMLCanvasElement) {\n\t\tthis.ctx = canvas.getContext('2d');\n\t\tthis.numCols = this.net.layerSizes.length + 1\n\t\tlet colW = this.canvas.width / this.numCols;\n\t\tthis.r = Math.min(20, colW / 4);\n\t}\n\n\tdraw() {\n\t\tthis.drawWeights();\n\t\tthis.drawNodes();\n\t}\n\n\tdrawWeights() {\n\t}\n\n\tdrawNodes() {\n\t\tif (!this.ctx) return;\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t\tfor (let col = 0; col < this.numCols; col++) {\n\t\t\tthis.drawCol(col);\n\t\t}\n\t}\n\n\tdrawCol(col: number) {\n\t\tlet numRows = col == 0 ? nn.numInputs : this.net.layerSizes[col - 1];\n\t\tfor (let row = 0; row < numRows; row++) {\n\t\t\tlet isInput = col == 0;\n\t\t\tlet isBias = false;\t//TODO draw bias\n\t\t\tlet [x, y] = this.getCenter(col, row);\n\t\t\tthis.drawNode(x, y, this.r, isInput, isBias);\n\t\t}\n\t}\n\n\tdrawNode(x: number, y: number, r: number, isInput: boolean, isBias: boolean) {\n\t\tif (!this.ctx) return;\n\t\tthis.ctx.strokeStyle = 'black';\n\t\tif (isBias)\n\t\t\tthis.ctx.fillStyle = '#2DD';\n\t\telse\n\t\t\tthis.ctx.fillStyle = '#337AB7';\n\t\tif (isInput) {\n\t\t\tlet x1 = x - r / 2;\n\t\t\tlet y1 = y - r / 2;\n\t\t\tlet dxy = r * 2;\n\t\t\tthis.ctx.fillRect(x1, y1, dxy, dxy);\n\t\t\tthis.ctx.strokeRect(x1, y1, dxy, dxy);\n\t\t}\n\t\telse {\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.arc(x, y, r, 0, Math.PI * 2);\n\t\t\tthis.ctx.fill();\n\t\t\tthis.ctx.beginPath();\n\t\t\tthis.ctx.arc(x, y, r, 0, Math.PI * 2);\n\t\t\tthis.ctx.stroke();\n\t\t}\n\t}\n\n\tgetCenter(col: number, row: number): [number, number] {\n\t\tlet numRows = col == 0 ? nn.numInputs : this.net.layerSizes[col - 1];\n\t\tlet colW = this.canvas.width / this.numCols;\n\t\tlet rowH = this.canvas.height / numRows;\n\t\tlet x = col * colW + colW / 2;\n\t\tlet y = row * rowH + rowH / 2;\n\t\treturn [x, y];\n\t}\n}\n"
  ]
}