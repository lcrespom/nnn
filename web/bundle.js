(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
const DEFAULT_ACTIVATION_FUNCTION = sigmoid;
class Neuron {
    constructor(numWeights) {
        this.output = NaN;
        this.weights = [];
        for (let i = 0; i < numWeights; i++)
            this.weights.push(Math.random());
    }
}
exports.Neuron = Neuron;
class NeuralNetwork {
    constructor(numInputs, numHidden, numOutputs) {
        this.numInputs = numInputs;
        this.numHidden = numHidden;
        this.numOutputs = numOutputs;
        // Initialize default params
        this.activationFunc = DEFAULT_ACTIVATION_FUNCTION;
        this.epsilon = 0.5;
        this.acceptableError = 0.001;
        this.maxLearnIterations = 1000;
        // Initialize layers
        this.hiddenLayer = [];
        for (let i = 0; i < numHidden; i++)
            this.hiddenLayer.push(new Neuron(this.numInputs + 1));
        this.outputLayer = [];
        for (let i = 0; i < numOutputs; i++)
            this.outputLayer.push(new Neuron(this.numHidden + 1));
    }
    // -------------------- Forward propagation --------------------
    forwardNeuron(neuron, inputs) {
        if (inputs.length != neuron.weights.length)
            throw new Error(`Invalid size of input array: expecting ${neuron.weights.length}, got ${inputs.length}`);
        let weightedSum = inputs.reduce((accum, input, i) => accum + input * neuron.weights[i], 0);
        neuron.output = this.activationFunc(weightedSum);
        return neuron.output;
    }
    forward(inputs) {
        let hlValues = [];
        let outValues = [];
        this.hiddenLayer.forEach(neuron => hlValues.push(this.forwardNeuron(neuron, this.addBias(inputs))));
        hlValues.push(1); // Add bias
        this.outputLayer.forEach(neuron => outValues.push(this.forwardNeuron(neuron, hlValues)));
        return outValues;
    }
    // -------------------- Back propagation --------------------
    backPropagate(inputs, targets) {
        // Adjust weights for output layer
        let hiddenOuts = this.hiddenLayer.map(neuron => neuron.output);
        let hiddenErrors = [];
        for (let i = 0; i < this.hiddenLayer.length; i++)
            hiddenErrors.push(0);
        for (let i = 0; i < this.outputLayer.length; i++)
            this.backPropagateOutNeuron(this.outputLayer[i], targets[i], this.addBias(hiddenOuts), hiddenErrors);
        // Adjust weights for hidden layer
        for (let i = 0; i < this.hiddenLayer.length; i++)
            this.backPropagateHiddenNeuron(this.hiddenLayer[i], hiddenErrors[i], this.addBias(inputs));
    }
    backPropagateOutNeuron(neuron, target, prevLayerOuts, prevLayerErrors) {
        let delta = (target - neuron.output) * neuron.output * (1 - neuron.output);
        for (let j = 0; j < neuron.weights.length; j++) {
            prevLayerErrors[j] += delta * neuron.weights[j];
            neuron.weights[j] += this.epsilon * delta * prevLayerOuts[j];
        }
        // delta := (D[j] - Y[j]) * Y[j] * (1 - Y[j]);
        // per ogni unità k del livello H (compreso bias)
        //    ErrH[k] := ErrH[k] + (delta * W2[k,j]);
        //    W2[k,j] := W2[k,j] + (epsilon * delta * H[k]);
    }
    backPropagateHiddenNeuron(neuron, error, inputs) {
        let delta = error * neuron.output * (1 - neuron.output);
        for (let j = 0; j < neuron.weights.length; j++)
            neuron.weights[j] += this.epsilon * delta * inputs[j];
        // delta := ErrH[k] * H[k] * (1 - H[k]);
        // per ogni unità i del livello X (compreso bias)
        //    Wl[i,k] := Wl[i,k] + (epsilon * delta * X[i]);
    }
    // -------------------- Iterative learning --------------------
    learn(examples) {
        let iteration = 0;
        let totalError = 0;
        do {
            for (let i = 0; i < examples.length; i++) {
                let actualOuts = this.forward(examples[i].inputs);
                let expectedOuts = examples[i].outputs;
                this.backPropagate(examples[i].inputs, expectedOuts);
                totalError = this.totalError(actualOuts, expectedOuts);
            }
            iteration++;
            this.reportLearn(iteration, totalError);
        } while (iteration < this.maxLearnIterations && totalError > this.acceptableError);
        return iteration;
        // ripeti (* epoche *)
        // 	 per ogni esempio {X,D}
        // 		esegui la rete con X e trova Y;
        // 		backpropagate;
        // 	 fine;
        // 	 calcola errore dell'intera epoca;
        // finché errore dell'epoca inferiore ad errore ammesso
    }
    reportLearn(iteration, totalError) {
        console.log(`Learn iteration ${iteration} - error: ${totalError}`);
    }
    totalError(actualOuts, expectedOuts) {
        const square = x => x * x;
        let sum = actualOuts.reduce((accum, actualOut, i) => accum + square(actualOut - expectedOuts[i]), 0);
        return sum / 2;
    }
    // -------------------- Misc --------------------
    addBias(values) {
        let biasedValues = values.slice();
        biasedValues.push(1);
        return biasedValues;
    }
}
exports.NeuralNetwork = NeuralNetwork;
// -------------------- Activation functions --------------------
function sigmoid(x) {
    if (x < -45.0)
        return 0.0;
    else if (x > 45.0)
        return 1.0;
    else
        return 1.0 / (1.0 + Math.exp(-x));
}

},{}],2:[function(require,module,exports){
"use strict";
const neurons_1 = require('./neurons');
let nn;
$(function () {
    $('input,textarea').on('input', evt => {
        let formData = getFormData();
        //TODO: validate and activate buttons
    });
    $('#butlearn').click(_ => {
        let formData = getFormData();
        nn = new neurons_1.NeuralNetwork(formData.numInputs, formData.numHidden, formData.numOutputs);
        nn.acceptableError = formData.maxError;
        nn.maxLearnIterations = formData.maxIterations;
        let examples = parseLearnLines(formData.learnLines, formData.numInputs, formData.numOutputs);
        let iterations = nn.learn(examples);
        console.log(`*** Learned in ${iterations} iterations`);
        //TODO: learn
    });
    $('#buttest').click(_ => {
        //TODO: test
    });
});
function getFormData() {
    return {
        numInputs: $('#nimputs').val(),
        numOutputs: $('#noutputs').val(),
        numHidden: $('#nhidden').val(),
        maxError: $('#maxerror').val(),
        maxIterations: $('#maxiters').val(),
        learnLines: $('#ldata').val(),
        testLines: $('#tdata').val()
    };
}
function parseLearnLines(allLines, numInputs, numOutputs) {
    let examples = [];
    let lines = allLines.split('\n');
    lines.forEach((line, i) => {
        if (line.length == 0)
            return;
        let example = parseExample(line);
        //TODO validate line by checking:
        //	- if example is null, then the / is missing
        //	- if the number of inputs or outputs is invalid, then some data is missing
        //	- if some value is NaN, then there are invalid numbers
        if (example)
            examples.push(example);
    });
    return examples;
}
function parseExample(line) {
    let inout = line.split('/');
    if (inout.length < 2)
        return null;
    let inputs = inout[0].split(' ').map(s => parseFloat(s));
    let outputs = inout[1].split(' ').map(s => parseFloat(s));
    return { inputs, outputs };
}

},{"./neurons":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
